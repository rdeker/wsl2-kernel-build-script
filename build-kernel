#!/usr/bin/env bash
# shellcheck disable=SC2162,SC2317

############################################################################################################################################
##
##  GitHub Script: https://github.com/slyfox1186/script-repo/blob/main/Bash/Installer%20Scripts/GitHub%20Projects/build-wsl2-kernel
##
##  Purpose: Build Official WSL2 Kernels
##
##  Updated: 10.07.23
##
##  Script version: 2.3
##
############################################################################################################################################

if [ "${EUID}" -eq '0' ]; then
    printf "%s\n\n" 'You must run this script WITHOUT root/sudo.'
    exit 1
fi

#
# PARSE COMMANDLINE ARGUMENTS - DEKER
#

match_kern=0
extra_opts=()
prompt_answer=''
while getopts 'v:o:' opt; do
	case "$opt" in
		v)
		  arg="$OPTARG"
		  echo "Building with kernel $ARG"
		  if [ $arg -eq 5 ]; then
			  prompt_answer="1"
		  elif [ $arg -eq 6 ]; then
			  prompt_answer="2"
		  else
			  echo "Kernel option ${arg} is not valid. Exiting."
			  exit
		  fi
		  ;;
		o)
		  arg="$OPTARG"
		  echo "Adding kernel config option $arg"
		  extra_opts+=("$arg")
		  
		  ;;
	esac
done

if [ ! -z ${prompt_answer}  ]; then
	echo "Prompt answer: ${prompt_answer}"
fi

#
# PROMPT THE USER TO CHOOSE THE KERNEL VERSION
#

prompt_fn()
{
    local answer
    clear

    if [ ! -z ${prompt_answer} ]; then
	    answer=$prompt_answer
    else
        printf "%s\n\n%s\n%s\n%s\n\n" \
            'Choose the kernel version:' \
            '[1] 5.15.133.1 (10.06.23)' \
            '[2] 6.1.21.2 (07.25.23)' \
            '[3] Exit'
        read -p 'Your choices are (1 to 3): ' answer
    fi
    clear

    case "${answer}" in
        1)      archive_url='https://github.com/microsoft/WSL2-Linux-Kernel/archive/refs/tags/linux-msft-wsl-5.15.133.1.tar.gz';;
        2)      archive_url='https://github.com/microsoft/WSL2-Linux-Kernel/archive/refs/tags/linux-msft-wsl-6.1.21.2.tar.gz';;
        3)      exit 0;;
        *)
                clear
                printf "%s\n\n" 'Bad user input. Reverting script...'
                sleep 3
                unset answer
                prompt_fn
                ;;
     esac
}
prompt_fn

#
# SET VARIABLES
#

script_ver=2.3
cwd="${PWD}"/wsl-build-script
archive_ver="$(echo "${archive_url}" | sed 's/^.*\/.*-wsl-\(.*\)\.tar\.gz$/\1/')"
archive_dir="${cwd}/wsl-kernel-${archive_ver}"
archive_ext="${archive_url//*.}"
archive_name="${archive_dir}.tar.${archive_ext}"
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36'
web_repo=https://github.com/slyfox1186/script-repo

printf "\n%s\n%s\n\n" \
    "WSL2 Build Script - v${script_ver}" \
    '==============================================='

#
# CREATE OUTPUT DIRECTORY
#

if [ ! -d "${cwd}" ]; then
    mkdir -p "${cwd}"
fi

#
# SET THE C + CXX COMPILERS
#

export CC=gcc CXX=g++

#
# SET COMPILER OPTIMIZATION FLAGS
#

export {CFLAGS,CXXFLAGS}='-g -O2 -march=native'

#
# SET PATH
#

PATH="\
/usr/lib/ccache:\
$HOME/.cargo/bin:\
$HOME/.local/bin:\
/usr/local/sbin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/cuda/bin\
"
export PATH

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n%s\n%s\n\n" \
        'The script has completed' \
        'Make sure to star this repository to show your support!' \
        "${web_repo}"
    exit 0
}

fail_fn()
{
    printf "\n\n%s\n\n%s\n\n%s\n\n" \
        "${1}" \
        'Please create a support ticket so I can work on a fix.' \
        "${web_repo}/issues"
    exit 1
}

add_opts_fn()
{
    if [ ${#extra_opts} -ne 0 ]; then
        for i in ${extra_opts[@]}; do
	    echo "Adding kernel option ${i} to config"
            echo "$i" >> ${archive_dir}/Microsoft/config-wsl
        done
    fi
}

#
# INSTALL REQUIRED APT PACKAGES
#

pkgs=(autoconf autogen automake bc binutils bison build-essential ccache
      curl dbus-x11 dwarves flex git jq libelf-dev libperl-dev libssl-dev
      libtalloc-dev libtbbmalloc2 libtool libtool-bin lzip m4 nasm texinfo
      unzip uuid-dev wget xclip xsel yasm)

for i in ${pkgs[@]}
do
    missing_pkg="$(sudo dpkg -l | grep -o "${i}")"

    if [ -z "${missing_pkg}" ]; then
        missing_pkgs+=" ${i}"
    fi
done

if [ -n "${missing_pkgs}" ]; then
    sudo apt -y install ${missing_pkgs}
    clear
fi

#
# DOWNLOAD THE ARCHIVE FILE
#

if [ ! -f "${archive_name}" ]; then
    printf "%s\n\n" 'Downloading the source code from GitHub...'
    wget -U "${user_agent}" --show-progress -cqO "${archive_name}" "${archive_url}"
fi

#
# CREATE THE OUTPUT DIRECTORY
#

if [ -d "${archive_dir}" ]; then
    sudo rm -fr "${archive_dir}"
fi
mkdir -p "${archive_dir}"

#
# EXTRACT THE ARCHIVE FILES INTO THE OUTPUT DIRECTORY
#

if ! tar -xf "${archive_name}" -C "${archive_dir}" --strip-components 1; then
    fail_fn "Failed to extract the archive files. Line: ${LINENO}"
fi

#
# BUILD PROGRAM FROM SOURCE
#

# Add any extra kernel options
add_opts_fn

cd "${archive_dir}" || exit 1
echo 'yes' | make "-j$(nproc --all)" KCONFIG_CONFIG='Microsoft/config-wsl'

# SHOW EXIT MESSAGE
exit_fn
